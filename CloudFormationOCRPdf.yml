AWSTemplateFormatVersion: '2010-09-09'
Description: CloudFormation Template to deploy two Lambda functions.

Resources:
  LambdaFunction1:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: OCR-PDF-Lambda
      Handler: index.handler 
      Runtime: nodejs16.x 
      Code:
        S3Bucket: ocrpdf-lambda-code 
        S3Key: lambda1.zip 
      Role: arn:aws:iam::356089859282:role/LabRole
      Timeout: 30

  LambdaFunction2:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: sendEmail-Lambda
      Handler: index.handler 
      Runtime: nodejs16.x 
      Code:
        S3Bucket: ocrpdf-lambda-code 
        S3Key: lambda2.zip
      Role: arn:aws:iam::356089859282:role/LabRole
      Timeout: 10

  ApiGatewayRestApi1:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: OCR-PDF-API

  LambdaFunction1Permission:
    Type: "AWS::Lambda::Permission"
    Properties:
      FunctionName: !Ref LambdaFunction1
      Action: "lambda:InvokeFunction"
      Principal: "apigateway.amazonaws.com"
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGatewayRestApi1}/*/*"

  ApiGatewayResource1:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref ApiGatewayRestApi1
      ParentId: !GetAtt ApiGatewayRestApi1.RootResourceId
      PathPart: 'upload'

  ApiGatewayMethod1:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ApiGatewayRestApi1
      ResourceId: !Ref ApiGatewayResource1
      HttpMethod: 'POST'
      AuthorizationType: 'NONE'
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: 'POST'
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaFunction1.Arn}/invocations
        PassthroughBehavior: WHEN_NO_MATCH
        IntegrationResponses:
          - StatusCode: 200
            ResponseTemplates:
              application/json: ""
      MethodResponses:
          - StatusCode: 200
            ResponseModels:
              application/json: "Empty"

  ApiGatewayMethod1Options:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ApiGatewayRestApi1
      ResourceId: !Ref ApiGatewayResource1
      HttpMethod: 'OPTIONS'
      AuthorizationType: 'NONE'
      Integration:
        Type: MOCK
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        PassthroughBehavior: WHEN_NO_MATCH    
        RequestTemplates:
          application/json: '{"statusCode":200}'   
      MethodResponses:
        - StatusCode: 200
          ResponseModels:
            application/json: "Empty"
          ResponseParameters:
            "method.response.header.Access-Control-Allow-Headers": true
            "method.response.header.Access-Control-Allow-Methods": true
            "method.response.header.Access-Control-Allow-Origin": true


  ApiGatewayRestApi2:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: SendEmail-API

  LambdaFunction2Permission:
    Type: "AWS::Lambda::Permission"
    Properties:
      FunctionName: !Ref LambdaFunction2
      Action: "lambda:InvokeFunction"
      Principal: "apigateway.amazonaws.com"
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGatewayRestApi2}/*/*"
     

  ApiGatewayResource2:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref ApiGatewayRestApi2
      ParentId: !GetAtt ApiGatewayRestApi2.RootResourceId
      PathPart: 'sendEmail'

  ApiGatewayMethod2:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ApiGatewayRestApi2
      ResourceId: !Ref ApiGatewayResource2
      HttpMethod: 'POST'
      AuthorizationType: 'NONE'
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: 'POST'
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaFunction2.Arn}/invocations
        PassthroughBehavior: WHEN_NO_MATCH
        IntegrationResponses:
          - StatusCode: 200
            ResponseTemplates:
              application/json: ""
      MethodResponses:
          - StatusCode: 200
            ResponseModels:
              application/json: "Empty"

  ApiGatewayMethod2Options:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ApiGatewayRestApi2
      ResourceId: !Ref ApiGatewayResource2
      HttpMethod: 'OPTIONS'
      AuthorizationType: 'NONE'
      Integration:
        Type: MOCK
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        PassthroughBehavior: WHEN_NO_MATCH    
        RequestTemplates:
          application/json: '{"statusCode":200}'   
      MethodResponses:
        - StatusCode: 200
          ResponseModels:
            application/json: "Empty"
          ResponseParameters:
            "method.response.header.Access-Control-Allow-Headers": true
            "method.response.header.Access-Control-Allow-Methods": true
            "method.response.header.Access-Control-Allow-Origin": true       

  ApiGatewayDeployment1:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - ApiGatewayMethod1
    Properties:
      RestApiId: !Ref ApiGatewayRestApi1

  ApiGatewayStage1:
    Type: AWS::ApiGateway::Stage
    Properties:
      RestApiId: !Ref ApiGatewayRestApi1
      DeploymentId: !Ref ApiGatewayDeployment1
      StageName: 'prod'

  ApiGatewayDeployment2:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - ApiGatewayMethod2
    Properties:
      RestApiId: !Ref ApiGatewayRestApi2

  ApiGatewayStage2:
    Type: AWS::ApiGateway::Stage
    Properties:
      RestApiId: !Ref ApiGatewayRestApi2
      DeploymentId: !Ref ApiGatewayDeployment2
      StageName: 'prod'

  TextExtractImageBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: text-extract-image-pdf
      PublicAccessBlockConfiguration:
        BlockPublicAcls: FALSE
        BlockPublicPolicy: FALSE
        IgnorePublicAcls: FALSE
        RestrictPublicBuckets: FALSE
      CorsConfiguration:
        CorsRules:
          - AllowedHeaders:
             - "*"
            AllowedMethods:
             - PUT
             - POST
             - DELETE
             - GET
            AllowedOrigins:
             - "*"

  TextExtractImageBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref TextExtractImageBucket
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
            Effect: Allow
            Principal: "*"
            Action:
              - "s3:GetObject"
              - "s3:putObject"
            Resource: !Sub "arn:aws:s3:::${TextExtractImageBucket}/*"

  ElasticBeanstalkApplication:
    Type: AWS::ElasticBeanstalk::Application
    Properties:
      Description: Frontend Application
      ApplicationName: ocrpdf

  FrontendVersion:
    Type: AWS::ElasticBeanstalk::ApplicationVersion
    Properties:
      ApplicationName: !Ref ElasticBeanstalkApplication
      Description: Frontend Application Version
      SourceBundle:
        S3Bucket: ocrpdf-lambda-code 
        S3Key: frontend.zip 

  FrontendEnvironment:
    Type: AWS::ElasticBeanstalk::Environment
    Properties:
      ApplicationName: !Ref ElasticBeanstalkApplication
      EnvironmentName: FrontendEnvironment
      SolutionStackName: 64bit Amazon Linux 2 v5.8.4 running Node.js 18
      VersionLabel: !Ref FrontendVersion
      OperationsRole: 'arn:aws:iam::356089859282:role/LabRole'
      Tier:
        Name: WebServer
        Type: Standard
      OptionSettings:
        - Namespace: 'aws:elasticbeanstalk:environment'
          OptionName: EnvironmentType
          Value: SingleInstance
        - Namespace: 'aws:autoscaling:launchconfiguration'
          OptionName: IamInstanceProfile
          Value: LabInstanceProfile  
        - Namespace: "aws:elasticbeanstalk:application:environment"
          OptionName: "REACT_APP_ApiUrl1"
          Value: !Sub "https://${ApiGatewayRestApi1}.execute-api.${AWS::Region}.amazonaws.com/prod/upload"
        - Namespace: 'aws:elasticbeanstalk:environment'
          OptionName: ServiceRole
          Value: 'arn:aws:iam::356089859282:role/LabRole'  
        - Namespace: "aws:elasticbeanstalk:application:environment"
          OptionName: "REACT_APP_ApiUrl2"
          Value: !Sub "https://${ApiGatewayRestApi2}.execute-api.${AWS::Region}.amazonaws.com/prod/sendEmail"  
        - Namespace: aws:autoscaling:launchconfiguration
          OptionName: InstanceType
          Value: t3.large  
          
Outputs:

  FrontendURL:
    Value: !Sub "http://${FrontendEnvironment.EndpointURL}/"
    Description: URL of the deployed frontend application
  
  FrontEndAPIUrl1:
    Value: !Sub "https://${ApiGatewayRestApi1}.execute-api.${AWS::Region}.amazonaws.com/prod/upload"
    Description: URL for API 1 to be used in the front-end application.

  FrontEndAPIUrl2:
    Value: !Sub "https://${ApiGatewayRestApi2}.execute-api.${AWS::Region}.amazonaws.com/prod/sendEmail"
    Description: URL for API 2 to be used in the front-end application.


